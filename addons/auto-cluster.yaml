type: update
id: postgres-primary-secondary-multiregion-auto-cluster
logo: /images/postgres-70x70.png
name: PostgreSQL Primary-Secondary Multiregion Auto-Cluster

baseUrl: https://raw.githubusercontent.com/DmytroZubelevych/postgres-multiregion/master

targetNodes:
  nodeGroup: sqldb

onInstall:
  - script: scripts/getEnvNodes.js
  - init
  - script: |-
      var regions = '${settings.regions}'.split(','), onAfterReturn = { setGlobals: {} }, glbs = onAfterReturn.setGlobals, pgsqlIPs = [];
      for (var cluster = 1, n = regions.length + 1; cluster < n; cluster++) {
          var resp = jelastic.env.control.GetEnvInfo('${settings.mainEnvName}-' + cluster, session);
          if (resp.result == 0) {
              for (var i = 0, k = resp.nodes; i < k.length; i++) { pgsqlIPs.push(k[i].address); }
          }
      }
      glbs["pgAddrsses"] = pgsqlIPs;
      return { result: 0, onAfterReturn: onAfterReturn };
  - addPgNodesToPool

actions:
  init:
    - if (${settings.clone:false} || ${this.update:false}):
      - cmd[${nodes.sqldb.master.id}]: jcm removeAllReplicaHosts
      - getPswd
      - forEach(globals.pgsqlEnvs):
          - if ('${@i}' != '${env.envName}'):
            - script: ${baseUrl}/scripts/updateConfigAfterClone.js
      - forEach(globals.pgsqlEnvs):
          - script: |-
              var resp = jelastic.marketplace.jps.Install({
                  envName: '${@i}',
                  session: session,
                  jps: '${baseUrl}/scripts/cloningAddon.yml'
              });
              if (resp.result != 0) return resp;
              return { result:0 }
    - else:
      - getPswd
      - forEach(globals.pgsqlEnvs):
          - if ('${@i}' != '${env.envName}'): 
            - script: ${baseUrl}/scripts/getSecondaryNodeParam.js
            - initSecondary: 
                id: ${response.secondaryNodeId}
                ip: ${response.secondaryNodeIp}
                domain: ${@i}
              
  initSecondary:
    - forEach(globals.pgsqlEnvs):
        - script: |-
            resp = jelastic.env.control.ExecCmdByGroup('${@i}', session, 'sqldb', toJSON([{ "command": "jcm addReplicaHost", "params": "${this.ip}" }]), false, false, "root");
            return resp;
    - cmd[${nodes.sqldb.master.id}]: |-
        sudo jem service restart
    - script: |-
        initSecondaryCmd = "jcm initSecondary &>> /var/log/run.log; jcm updateHbaConf ${globals.pgsqlAddresses} ${this.ip}; chown -R postgres:postgres /var/lib/pgsql/data; jem service restart";
        resp = jelastic.env.control.ExecCmdById('${this.domain}', session, ${this.id}, toJSON([{ "command": initSecondaryCmd, "params": "" }]), false, "root");
        return resp;

  addPgNodesToPool:
    - forEach(globals.pgAddrsses):
        - script: |-
            var regions = '${settings.pgpool2Regions}'.split(','), addCmd;
            for (var cluster = 1, n = regions.length + 1; cluster < n; cluster++) {
                var resp = jelastic.env.control.GetEnvInfo('${settings.mainEnvName}-pgpool2-' + cluster, session);
                if (resp.result == 0) {
                    addCmd = "jcm addPgNodeToPgpool2Conf " + '${@i}' + " &>> /var/log/run.log";
                    var resp = jelastic.env.control.ExecCmdByGroup('${settings.mainEnvName}-pgpool2-' + cluster, session, 'extra', toJSON([{ "command": addCmd, "params": "" }]), false, false, "postgres");
                    if (resp.result != 0) return resp;
                }
            }
            return { result: 0 };
    - script: |-
        var regions = '${settings.pgpool2Regions}'.split(','), enableWatchdogCmd, addNodeCmd, pgpoolNodeIp;
        for (var cluster = 1, n = regions.length + 1; cluster < n; cluster++) {
            var resp = jelastic.env.control.GetEnvInfo('${settings.mainEnvName}-pgpool2-' + cluster, session);
            if (resp.result == 0) {
                if ( regions.length > 1 ) {
                    for (var node = 1, n = regions.length + 1; node < n; node++) {
                        var resp = jelastic.env.control.GetEnvInfo('${settings.mainEnvName}-pgpool2-' + node, session);
                        if (resp.result != 0) { return resp; }
                        pgpoolNodeIp = resp.nodes[0].address;
                        addNodeCmd = "jcm addWatchdogConfig " + node + " " + pgpoolNodeIp;
                        var resp = jelastic.env.control.ExecCmdByGroup('${settings.mainEnvName}-pgpool2-' + cluster, session, 'extra', toJSON([{ "command": addNodeCmd, "params": "" }]), false, false, "root");
                        if (resp.result != 0) return resp;
                    }
                    var resp = jelastic.env.control.ExecCmdByGroup('${settings.mainEnvName}-pgpool2-' + cluster, session, 'extra', toJSON([{ "command": "jcm enableWatchdog", "params": "" }]), false, false, "root");
                    if (resp.result != 0) return resp;
                }
                enableWatchdogCmd = "jcm setPgpoolNodeId " + cluster + "; chown -R postgres:postgres /etc/pgpool-II; jem service start";
                var resp = jelastic.env.control.ExecCmdByGroup('${settings.mainEnvName}-pgpool2-' + cluster, session, 'extra', toJSON([{ "command": enableWatchdogCmd, "params": "" }]), false, false, "root");
                if (resp.result != 0) return resp;
            }
        }
        return { result: 0 };

  getPswd:
    - cmd[${nodes.sqldb.master.id}]: |-
        jcm initMaster &>> /var/log/run.log
        jcm getPswd
    - setGlobals: 
        password: ${response.out}
